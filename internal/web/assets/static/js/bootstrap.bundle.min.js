// Bootstrap 5.3.0 - Minimal JavaScript for EasyGo Panel
// This is a simplified version. In production, download the full bootstrap.bundle.min.js

(function() {
    'use strict';

    // Modal functionality
    class Modal {
        constructor(element) {
            this.element = element;
            this.backdrop = null;
        }

        show() {
            this.element.style.display = 'block';
            this.element.classList.add('show');
            this.showBackdrop();
        }

        hide() {
            this.element.style.display = 'none';
            this.element.classList.remove('show');
            this.hideBackdrop();
        }

        showBackdrop() {
            if (!this.backdrop) {
                this.backdrop = document.createElement('div');
                this.backdrop.className = 'modal-backdrop fade show';
                document.body.appendChild(this.backdrop);
            }
        }

        hideBackdrop() {
            if (this.backdrop) {
                this.backdrop.remove();
                this.backdrop = null;
            }
        }
    }

    // Alert functionality
    class Alert {
        constructor(element) {
            this.element = element;
        }

        close() {
            this.element.classList.add('fade');
            setTimeout(() => {
                this.element.remove();
            }, 150);
        }
    }

    // Dropdown functionality
    class Dropdown {
        constructor(element) {
            this.element = element;
            this.menu = element.nextElementSibling;
            this.isOpen = false;
        }

        toggle() {
            if (this.isOpen) {
                this.hide();
            } else {
                this.show();
            }
        }

        show() {
            this.menu.classList.add('show');
            this.isOpen = true;
        }

        hide() {
            this.menu.classList.remove('show');
            this.isOpen = false;
        }
    }

    // Collapse functionality
    class Collapse {
        constructor(element) {
            this.element = element;
        }

        toggle() {
            if (this.element.classList.contains('show')) {
                this.hide();
            } else {
                this.show();
            }
        }

        show() {
            this.element.style.height = this.element.scrollHeight + 'px';
            this.element.classList.add('show');
        }

        hide() {
            this.element.style.height = '0px';
            this.element.classList.remove('show');
        }
    }

    // Tooltip functionality (basic)
    class Tooltip {
        constructor(element) {
            this.element = element;
            this.tooltip = null;
        }

        show() {
            if (!this.tooltip) {
                this.tooltip = document.createElement('div');
                this.tooltip.className = 'tooltip';
                this.tooltip.textContent = this.element.getAttribute('title') || this.element.getAttribute('data-bs-title');
                document.body.appendChild(this.tooltip);
            }
        }

        hide() {
            if (this.tooltip) {
                this.tooltip.remove();
                this.tooltip = null;
            }
        }
    }

    // Global Bootstrap object
    window.bootstrap = {
        Modal: Modal,
        Alert: Alert,
        Dropdown: Dropdown,
        Collapse: Collapse,
        Tooltip: Tooltip
    };

    // Event delegation for data attributes
    document.addEventListener('click', function(e) {
        const target = e.target;

        // Modal triggers
        if (target.hasAttribute('data-bs-toggle') && target.getAttribute('data-bs-toggle') === 'modal') {
            const modalId = target.getAttribute('data-bs-target');
            const modal = document.querySelector(modalId);
            if (modal) {
                const modalInstance = new Modal(modal);
                modalInstance.show();
            }
        }

        // Modal close buttons
        if (target.classList.contains('btn-close') || target.getAttribute('data-bs-dismiss') === 'modal') {
            const modal = target.closest('.modal');
            if (modal) {
                const modalInstance = new Modal(modal);
                modalInstance.hide();
            }
        }

        // Alert close buttons
        if (target.classList.contains('btn-close') || target.getAttribute('data-bs-dismiss') === 'alert') {
            const alert = target.closest('.alert');
            if (alert) {
                const alertInstance = new Alert(alert);
                alertInstance.close();
            }
        }

        // Dropdown toggles
        if (target.hasAttribute('data-bs-toggle') && target.getAttribute('data-bs-toggle') === 'dropdown') {
            e.preventDefault();
            const dropdownInstance = new Dropdown(target);
            dropdownInstance.toggle();
        }

        // Collapse toggles
        if (target.hasAttribute('data-bs-toggle') && target.getAttribute('data-bs-toggle') === 'collapse') {
            e.preventDefault();
            const collapseId = target.getAttribute('data-bs-target');
            const collapse = document.querySelector(collapseId);
            if (collapse) {
                const collapseInstance = new Collapse(collapse);
                collapseInstance.toggle();
            }
        }
    });

    // Close dropdowns when clicking outside
    document.addEventListener('click', function(e) {
        const dropdowns = document.querySelectorAll('.dropdown-menu.show');
        dropdowns.forEach(dropdown => {
            if (!dropdown.parentElement.contains(e.target)) {
                dropdown.classList.remove('show');
            }
        });
    });

    // Close modals when clicking backdrop
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('modal')) {
            const modalInstance = new Modal(e.target);
            modalInstance.hide();
        }
    });

    // ESC key to close modals
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            const modals = document.querySelectorAll('.modal.show');
            modals.forEach(modal => {
                const modalInstance = new Modal(modal);
                modalInstance.hide();
            });
        }
    });

})();